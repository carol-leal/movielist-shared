generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdLists  List[]        @relation("CreatedLists")
  sharedLists   ListShare[]
  ratings       MovieRating[]
  addedMovies   ListMovie[]   @relation("UserAddedMovies")
}

model List {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  createdBy   User        @relation("CreatedLists", fields: [createdById], references: [id])
  sharedWith  ListShare[]
  movies      ListMovie[]

  @@index([name])
}

model Movie {
  id          Int         @id @default(autoincrement())
  title       String
  overview    String?
  releaseDate DateTime?
  posterPath  String?
  genres String[]
  status      String?
  tmdbId      Int         @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  listEntries ListMovie[]
}

model ListShare {
  id     Int    @id @default(autoincrement())
  listId Int
  userId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([listId, userId])
}

model ListMovie {
  id        Int             @id @default(autoincrement())
  listId    Int
  movieId   Int
  addedById String
  status    String          @default("Pending")
  addedBy   User            @relation("UserAddedMovies", fields: [addedById], references: [id])
  list      List            @relation(fields: [listId], references: [id], onDelete: Cascade)
  movie     Movie           @relation(fields: [movieId], references: [id], onDelete: Cascade)
  ratings   MovieRating[]   @relation("ListMovieRatings")

  @@unique([listId, movieId]) 
}


model MovieRating {
  id          Int       @id @default(autoincrement())
  listMovieId Int
  userId      String
  rating      Float
  listMovie   ListMovie @relation("ListMovieRatings", fields: [listMovieId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([listMovieId, userId])
}
